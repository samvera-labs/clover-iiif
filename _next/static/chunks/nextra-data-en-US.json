{"/docs/composing":{"title":"Getting Started","data":{"":"Clover IIIF is designed to allow for rapid creation of web content translated from IIIF resources. The following is quick step-by-step guide to get you up and running with Clover IIIF.","creating-a-work-page#Creating a Work page":"In this tutorial, we will install Clover IIIF and compose a \"Work\" page representing a IIIF Manifest for Northwestern Football vs. Illinois, 1950.","install-package#Install package":"Add the following dependency to your project:\nnpm install @samvera/clover-iiif","create-file#Create file":"Create a file called Work.jsx in your project and add the following:","define-component#Define component":"Import React. Define and export a functional component named Work that renders an empty <article> element.\nimport React from \"react\";\nconst Work = () => {\n  return <article></article>;\n};\nexport default Work;","add-viewer#Add Viewer":"As an initial step, define a constant manifestId that points to the IIIF Manifest for Northwestern Football vs. Illinois, 1950. Then, add a <Viewer> component to the Work component that renders the IIIF Manifest. If your react application is running in your browser, you should see the Clover IIIF viewer.\nimport React from \"react\";\nimport Viewer from \"@samvera/clover-iiif/viewer\";\nconst Work = () => {\n  const manifestId =\n    \"https://api.dc.library.northwestern.edu/api/v2/works/0902aed4-0eb0-4ab4-a151-c925493be04e?as=iiif\";\n  return (\n    <article>\n      <Viewer iiifContent={manifestId} />\n    </article>\n  );\n};\nexport default Work;","add-manifest-content#Add Manifest Content":"Next, we add the IIIF Primitives components to the Work component to render the IIIF Manifest content.This requires fetching the IIIF Manifest and passing it to the components. The following code snippet demonstrates how to fetch the IIIF Manifest in a useEffect hook, set the manifest in state, and pass the manifest properties to the IIIF Primitives components.\nWhile the Viewer and Slider components are designed for both the IIIF\nPresentation API 2.x and 3.0, the Primitives components, e.g., Label,\nSummary, Metadata, are limited to the IIIF Presentation API 3.0. If\nthis is an issue, you can use\n@iiif/parser for\nconversion.\nimport React, { useEffect, useState } from \"react\";\nimport Viewer from \"@samvera/clover-iiif/viewer\";\nimport {\n  Homepage,\n  Label,\n  Metadata,\n  PartOf,\n  RequiredStatement,\n  SeeAlso,\n  Summary,\n} from \"@samvera/clover-iiif/primitives\";\nconst Work = () => {\n  const [manifest, setManifest] = useState();\n  const manifestId =\n    \"https://api.dc.library.northwestern.edu/api/v2/works/0902aed4-0eb0-4ab4-a151-c925493be04e?as=iiif\";\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(manifestId);\n      const json = await response.json();\n      setManifest(json);\n    })();\n  }, [manifestId]);\n  if (!manifest) return <></>;\n  return (\n    <article>\n      <Viewer iiifContent={manifestId} />\n      <div>\n        <Label label={manifest.label} as=\"h1\" />\n        <Summary summary={manifest.summary} as=\"p\" />\n        <Metadata metadata={manifest.metadata} />\n        <RequiredStatement requiredStatement={manifest.requiredStatement} />\n        <PartOf partOf={manifest.partOf} />\n        <SeeAlso seeAlso={manifest.seeAlso} />\n        <Homepage homepage={manifest.homepage} />\n      </div>\n    </article>\n  );\n};\nexport default Work;","add-slider#Add Slider":"Finally, we add the Slider component to render the IIIF Collection that this Manifest is part of. We also need to import the swiper CSS files for baseline styling.\nimport React, { useEffect, useState } from \"react\";\nimport Viewer from \"@samvera/clover-iiif/viewer\";\nimport {\n  Homepage,\n  Label,\n  Metadata,\n  PartOf,\n  RequiredStatement,\n  SeeAlso,\n  Thumbnail,\n} from \"@samvera/clover-iiif/primitives\";\nimport Slider from \"@samvera/clover-iiif/slider\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nconst Work = () => {\n  const [manifest, setManifest] = useState();\n  const manifestId =\n    \"https://api.dc.library.northwestern.edu/api/v2/works/0902aed4-0eb0-4ab4-a151-c925493be04e?as=iiif\";\n  const collectionId = manifest?.partOf[0].id;\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(manifestId);\n      const json = await response.json();\n      setManifest(json);\n    })();\n  }, [manifestId]);\n  if (!manifest) return <></>;\n  return (\n    <article>\n      <Viewer iiifContent={manifestId} />\n      <div>\n        <Label label={manifest.label} as=\"h1\" />\n        <Summary summary={manifest.summary} as=\"p\" />\n        <Metadata metadata={manifest.metadata} />\n        <RequiredStatement requiredStatement={manifest.requiredStatement} />\n        <PartOf partOf={manifest.partOf} />\n        <SeeAlso seeAlso={manifest.seeAlso} />\n        <Homepage homepage={manifest.homepage} />\n      </div>\n      <Slider iiifContent={collectionId} />\n    </article>\n  );\n};\nexport default Work;","summary#Summary":"In this tutorial, we installed Clover IIIF and composed an unstyled \"Work\" page representing a IIIF Manifest. The completed code covered in these steps is available in a CodeSandbox."}},"/docs/homepage":{"title":"Homepage","data":{"":"A web page that is about the object represented by the resource that has the homepage property.\n<Homepage\n  homepage={[\n    {\n      id: \"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\",\n      type: \"Text\",\n      format: \"text/html\",\n      label: {\n        none: [\n          \"Homepage at Northwestern University Libraries Digital Collections\",\n        ],\n      },\n    },\n  ]}\n/>\n<a\n  href=\"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\"\n  class=\"c-PJLV\"\n>\n  Homepage at Northwestern University Libraries Digital Collections\n</a>","usage#Usage":"","react#React":"import { Homepage } from \"@samvera/clover-iiif/primitives\";\nconst CustomHomepage = ({ homepage }) => {\n  return <Homepage homepage={homepage} />;\n};\nexport default CustomHomepage;","nextjs#Next.js":"If using Next.js, you will want to render your Homepage component as a Next.js Link component. To do so, pass the Homepage component with the as prop using Link.\nimport Link from \"next/link\";\nimport { Primitives as IIIF } from \"@samvera/clover-iiif/primitives\";\nconst CustomHomepage = ({ homepage }) => {\n  return <Homepage homepage={homepage} as={Link} />;\n};\nexport default CustomHomepage;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\ta\ta\t--\thomepage\thomepage\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","html-attributes#HTML Attributes":"Homepage, like all Clover IIIF primitives accept common HTMLElement attributes. Use the JSX style className prop to add custom classes. The same attribute methodology can be used for id, style, title, data-*, and aria-* props.In the following example, an onClick() function will display an with the data-homepage-id attribute value.\n<Homepage\n  homepage={[\n    {\n      id: \"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\",\n      type: \"Text\",\n      format: \"text/html\",\n      label: {\n        none: [\n          \"Homepage at Northwestern University Libraries Digital Collections\",\n        ],\n      },\n    },\n  ]}\n  role=\"button\"\n  data-homepage-id=\"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\"\n  onClick={(e) => {\n    e.preventDefault();\n    alert(e.target.dataset.homepageId);\n  }}\n/>\n<a\n  href=\"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\"\n  role=\"button\"\n  class=\"c-PJLV\"\n>\n  Homepage at Northwestern University Libraries Digital Collections\n</a>","wrapping-children#Wrapping Children":"The Homepage component can also be used to wrap React children. An aria-label element with the value of the homepage label.\n<Homepage\n  homepage={[\n    {\n      id: \"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\",\n      type: \"Text\",\n      format: \"text/html\",\n      label: {\n        none: [\n          \"Homepage at Northwestern University Libraries Digital Collections\",\n        ],\n      },\n    },\n  ]}\n>\n  <span>View Homepage</span>\n</Homepage>\nView Homepage\n<a\n  aria-label=\"Homepage at Northwestern University Libraries Digital Collections\"\n  href=\"https://dc.library.northwestern.edu/items/71153379-4283-43be-8b0f-4e7e3bfda275\"\n  class=\"c-PJLV\"\n>\n  <span>View Homepage</span>\n</a>"}},"/docs/i18n":{"title":"i18n","data":{"":"We welcome contributions to Clover IIIF in any language. If you would like to contribute to a language, please follow the instructions below.\n{\n  \"commonClose\": \"Close\",\n  \"commonNext\": \"Next\",\n  \"commonPrevious\": \"Previous\",\n  \"commonSearch\": \"Search\",\n  \"commonSearchPlaceholder\": \"Search...\",\n  \"commonShare\": \"Share\",\n  \"commonViewAll\": \"View All\",\n  ...\n}","how-to-contribute#How to contribute":"Fork the Clover IIIF repository.\nCreate a new file in the src/i18n/locales directory for the relative BCP 47 language code you would like to contribute towards, example fr.json for French.\nCopy the en.json file as a template and translate the string values for each key.\nImport the new language JSON file within the src/i18n/locales/index.ts file and include it in the default export.\nSubmit a pull request.","adding-a-new-locale#Adding a new locale":"Add a new file in the src/i18n/locales directory with the relative BCP 47 language code, example fr.json for French.\n{\n  \"commonClose\": \"Fermer\",\n  \"commonNext\": \"Suivant\",\n  \"commonPrevious\": \"Précédent\",\n  \"commonSearch\": \"Rechercher\",\n  \"commonSearchPlaceholder\": \"Rechercher...\",\n  \"commonShare\": \"Partager\",\n  \"commonViewAll\": \"Voir Tout\",\n  ...\n}\nimport en from \"./en.json\";\nimport fr from \"./fr.json\";\nexport default {\n  en,\n  fr,\n};","language-and-region-subtags#Language and Region subtags":"If you would like to contribute a locale for a lanugage with a region subtag,\nplease use the - dash character to separate the language and region in the filename,\nexample fr-CA.json for Canadian French.You will need to adjust the import statement in the src/i18n/locales/index.ts file to include the new locale.\nimport en from \"./en.json\";\nimport fr from \"./fr.json\";\nimport frCA from \"./fr-CA.json\";\nexport default {\n  en,\n  fr,\n  \"fr-CA\": frCA,\n};"}},"/docs":{"title":"Docs","data":{"":"UI component library for rapidly creating high-quality and accessible IIIF-fluent web interfaces.Clover IIIF is a suite of Manifest and Collection components combined with lower-level IIIF Presentation 3.0 API UI components. Clover IIIF has a focus on accessibility, customization and developer experience. You can use Clover IIIF to build your own custom IIIF-fluent web interfaces while still using the full power of the IIIF Presentation 3.0 API.","vision#Vision":"Implementation of the IIIF Presentation API does not need to be limited to a primary viewer. Using Clover IIIF breaks the model of a \"viewer\" and allows the IIIF Presentation API to be used as a front-end for any web application. This is possible because the IIIF Presentation API is a highly defined and interoperable specification for representing digital objects. This means that the IIIF Presentation API can be used to represent any digital object, not just images. This concept gives creation to highly interoperable web user interfaces.","key-features#Key Features":"Accessibility - All components lean on WAI-ARIA design patterns to ensure that they are accessible to all users.\nCustomization - All components are designed to be easily customized with CSS.\nDeveloper Experience - All components are built with developer experience in mind and are designed to be easily integrated into any web application."}},"/docs/label":{"title":"Label","data":{"":"The Label component is used to display the label of a resource. It is used in the following contexts: Manifest, Canvas, Range, Annotation, AnnotationPage, Collection, and Manifest. It is a string or an object with language keys and string values.\n<Label label={{ none: [\"Crossing the Pend d'Oreille - Kalispel\"] }} />\n<span class=\"c-PJLV\">Crossing the Pend d'Oreille - Kalispel</span>","usage#Usage":"","react#React":"import { Label } from \"@samvera/clover-iiif/primitives\";\nconst CustomLabel = ({ label }) => {\n  return <Label label={label} />;\n};\nexport default CustomLabel;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tspan, h1, h2, h3, h4, h5, h6, p, label, dt, dd\tspan\t--\tlabel\tlabel\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","custom-element#Custom Element":"The Label component can be rendered as  span, h1, h2, h3, h4, h5, h6, p, label, dt, or dd. The default is span.\n<Label\n  label={{ none: [\"Self-Portrait Dedicated to Paul Gauguin\"] }}\n  as=\"h3\"\n/>\n<h3 class=\"c-PJLV\">Self-Portrait Dedicated to Paul Gauguin</h1>","html-attributes#HTML Attributes":"Label, like all Clover IIIF primitives accept common HTMLElement attributes. Use the JSX style className prop to add custom classes. The same attribute methodology can be used for id, style, title, data-*, and aria-* props.\n<Label\n  label={{ none: [\"Self-Portrait Dedicated to Paul Gauguin\"] }}\n  className=\"custom-label-class\"\n/>\n<span class=\"c-PJLV custom-label-class\">\n  Self-Portrait Dedicated to Paul Gauguin\n</span>","language#Language":"Additional to being rendered to the DOM like other attributes, the value of lang will couple with InternationalString props to output the denoted label, value, summary entries. If lang is undefined, entries will default to the first entry in the array index. The value of lang should be a two letter BCP 47 language code.\n<Label\n  label={{\n    en: [\"Notes from staging and environment meetings\"],\n    fr: [\"Notes des réunions de mise en scène et d'environnement\"],\n  }}\n  lang=\"fr\"\n/>\n<span lang=\"fr\" class=\"c-PJLV\">\n  Notes des réunions de mise en scène et d'environnement\n</span>"}},"/docs/partOf":{"title":"PartOf","data":{"":"A containing resource that includes the resource that has the partOf property.\n<PartOf\n  partOf={[\n    {\n      id: \"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\",\n      type: \"Collection\",\n      label: {\n        none: [\"Commedia dell'Arte: The Masks of Antonio Fava\"],\n      },\n      summary: {\n        none: [\n          \"The Commedia dell'Arte, the famous improvisational theatre style born in Renaissance Italy, remains a major influence in today's theatre. Antonio Fava is an actor, comedian, author, director, musician, mask maker and Internationally renowned Maestro of Commedia dell'Arte.  The masks in this collection are all stored in the Charles Deering McCormick Library of Special Collections. Fava's book The Comic Mask in the Commedia dell'Arte is published by Northwestern University Press.\",\n        ],\n      },\n    },\n  ]}\n/>\n<ul class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a href=\"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\">\n      Commedia dell'Arte: The Masks of Antonio Fava\n    </a>\n  </li>\n</ul>","usage#Usage":"","react#React":"import { PartOf } from \"@samvera/clover-iiif/primitives\";\nconst CustomPartOf = ({ partOf }) => {\n  return <PartOf partOf={partOf} />;\n};\nexport default CustomPartOf;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tol, ul\tul\t--\tpartOf\tpartOf\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","custom-element#Custom Element":"The PartOf component can be rendered as either ol or ul elements. The default is ul.\n<PartOf\n  partOf={[\n    {\n      id: \"https://digital.lib.utk.edu/assemble/collection/collections/rfta\",\n      type: \"Collection\",\n      label: { en: [\"Rising From the Ashes Oral Histories\"] },\n    },\n    {\n      id: \"https://digital.lib.utk.edu/assemble/collection/collections/rftacuratedart\",\n      type: \"Collection\",\n      label: {\n        en: [\n          \"Rising from the Ashes: The Chimney Tops 2 Wildfires in Memory and Art\",\n        ],\n      },\n    },\n  ]}\n  as=\"ol\"\n/>\n<ol class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a href=\"https://digital.lib.utk.edu/assemble/collection/collections/rfta\">\n      Rising From the Ashes Oral Histories\n    </a>\n  </li>\n  <li class=\"c-PJLV\">\n    <a href=\"https://digital.lib.utk.edu/assemble/collection/collections/rftacuratedart\">\n      Rising from the Ashes: The Chimney Tops 2 Wildfires in Memory and Art\n    </a>\n  </li>\n</ol>"}},"/docs/rendering":{"title":"Rendering","data":{"":"The Rendering component is used to display a list of alternate formats related to a resource. Whereas SeeAlso is used\nto link to a machine-readable resource such as metadata, the Rendering component alerts users that the resource is\navailable in another format such as PDF or ePub or has a related format. Because of the wide variety of formats that\nresources can be available in, the Rendering component is flexible and be of any media type and contain any type of\ndata.\n<Rendering\n  rendering={[\n    {\n      id: \"https://fixtures.iiif.io/other/UCLA/kabuki_ezukushi_rtl.pdf\",\n      type: \"Text\",\n      label: {\n        en: [\"PDF version\"],\n      },\n      format: \"application/pdf\",\n    },\n  ]}\n/>\n<ul class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a\n      href=\"https://fixtures.iiif.io/other/UCLA/kabuki_ezukushi_rtl.pdf\"\n      target=\"_blank\"\n    >\n      PDF version\n    </a>\n  </li>\n</ul>","usage#Usage":"","react#React":"import { Rendering } from \"@samvera/clover-iiif/primitives\";\nconst CustomRendering = ({ rendering }) => {\n  return <Rendering rendering={rendering} />;\n};\nexport default CustomRendering;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tol, ul\tul\t--\trendering\trendering\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","custom-element#Custom Element":"The Rendering component can be rendered as either ol or ul elements. The default is ul.\n<Rendering\n  rendering={[\n    {\n      id: \"https://fixtures.iiif.io/other/UCLA/kabuki_ezukushi_rtl.pdf\",\n      type: \"Text\",\n      label: {\n        en: [\"PDF version\"],\n      },\n      format: \"application/pdf\",\n    },\n  ]}\n  as=\"ol\"\n/>\n<ol class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a href=\"https://fixtures.iiif.io/other/UCLA/kabuki_ezukushi_rtl.pdf\">\n      PDF version\n    </a>\n  </li>\n</ol>"}},"/docs/requiredStatement":{"title":"RequiredStatement","data":{"":"The RequiredStatement component renders the required statement for a IIIF resource. The required statement is a human readable label and value pair that describes the rights status of the resource.\n<RequiredStatement\n  requiredStatement={{\n    label: {\n      none: [\"Attribution\"],\n    },\n    value: {\n      none: [\n        \"Courtesy of Northwestern University Libraries\",\n        \"The images on this web site are from material in the collections of the Charles Deering McCormick Library of Special Collections of Northwestern University Libraries, are provided for use by its students, faculty and staff, and by other researchers visiting this site, for research consultation and scholarly purposes only. Further distribution and/or any commercial use of the images from this site is not permitted.\",\n      ],\n    },\n  }}\n/>\n<dl class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"attribution\">\n    <dt class=\"c-PJLV\">Attribution</dt>\n    <dd class=\"c-PJLV\">\n      Courtesy of Northwestern University Libraries, The images on this web\n      site are from material in the collections of the Charles Deering\n      McCormick Library of Special Collections of Northwestern University\n      Libraries, are provided for use by its students, faculty and staff,\n      and by other researchers visiting this site, for research consultation\n      and scholarly purposes only. Further distribution and/or any\n      commercial use of the images from this site is not permitted.\n    </dd>\n  </div>\n</dl>","usage#Usage":"","react#React":"import { RequiredStatement } from \"@samvera/clover-iiif/primitives\";\nconst CustomRequiredStatement = ({ requiredStatement }) => {\n  return <RequiredStatement requiredStatement={requiredStatement} />;\n};\nexport default CustomRequiredStatement;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tdl\tdl\t--\trequiredStatement\trequiredStatement\t--\tYes\tcustomValueDelimiter\tstring?\t,\t--\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","html-attributes#HTML Attributes":"RequiredStatement, like all Clover IIIF primitives accept common HTMLElement attributes. Use the JSX style className prop to add custom classes. The same attribute methodology can be used for id, style, title, data-*, and aria-* props.\n<RequiredStatement\n  requiredStatement={{\n    label: {\n      en: [\"Rights\"],\n    },\n    value: {\n      en: [\n        '<span><a href=\"http://rightsstatements.org/vocab/InC/1.0/\"><img src=\"https://rightsstatements.org/files/buttons/InC.dark-white-interior-blue-type.svg\"/></a></span><br/><span><a href=\"http://rightsstatements.org/vocab/InC/1.0/\">In Copyright</a>:  This Item is protected by copyright and/or related rights. You are free to use this Item in any way that is permitted by the copyright and related rights legislation that applies to your use. For other uses you need to obtain permission from the rights-holder(s).</span><br/>',\n      ],\n    },\n  }}\n  className=\"custom-class\"\n/>\n<dl class=\"c-PJLV custom-class\">\n  <div role=\"group\" data-label=\"rights\">\n    <dt class=\"c-PJLV\">Rights</dt>\n    <dd class=\"c-PJLV\">\n      <span>\n        <a href=\"http://rightsstatements.org/vocab/InC/1.0/\">\n          <img src=\"https://rightsstatements.org/files/buttons/InC.dark-white-interior-blue-type.svg\" />\n        </a>\n      </span>\n      <br/>\n      <span>\n        <a href=\"http://rightsstatements.org/vocab/InC/1.0/\">In Copyright</a>:  This Item is protected by copyright and/or related rights. You are free to use this Item in any way that is permitted by the copyright and related rights legislation that applies to your use. For other uses you need to obtain permission from the rights-holder(s).\n      </span>\n      <br/>\n    </dd>\n  </div>\n</dl>","language#Language":"Additional to being rendered to the DOM like other attributes, the value of lang will couple with InternationalString props to output the denoted label, value, summary entries. If lang is undefined, entries will default to the first entry in the array index. The value of lang should be a two letter BCP 47 language code.\n<RequiredStatement\n  requiredStatement={{\n    label: {\n      en: [\"Attribution\"],\n      no: [\"Kreditering\"],\n    },\n    value: {\n      en: [\"Provided by University of Bergen Library\"],\n      no: [\"Tilgjengeliggjort av Universitetsbiblioteket i Bergen\"],\n    },\n  }}\n  lang=\"no\"\n/>\n<dl lang=\"no\" class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"attribution\">\n    <dt lang=\"no\" class=\"c-PJLV\">\n      Kreditering\n    </dt>\n    <dd lang=\"no\" class=\"c-PJLV\">\n      Tilgjengeliggjort av Universitetsbiblioteket i Bergen\n    </dd>\n  </div>\n</dl>","custom-delimiter#Custom Delimiter":"<RequiredStatement\n  requiredStatement={{\n    label: {\n      none: [\"Attribution\"],\n    },\n    value: {\n      none: [\n        \"Courtesy of Northwestern University Libraries\",\n        \"The images on this web site are from material in the collections of the Charles Deering McCormick Library of Special Collections of Northwestern University Libraries, are provided for use by its students, faculty and staff, and by other researchers visiting this site, for research consultation and scholarly purposes only. Further distribution and/or any commercial use of the images from this site is not permitted.\",\n      ],\n    },\n  }}\n  customValueDelimiter=\". \"\n/>\n<dl class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"attribution\">\n    <dt class=\"c-PJLV\">Attribution</dt>\n    <dd class=\"c-PJLV\">\n      Courtesy of Northwestern University Libraries. The images on this web\n      site are from material in the collections of the Charles Deering\n      McCormick Library of Special Collections of Northwestern University\n      Libraries, are provided for use by its students, faculty and staff,\n      and by other researchers visiting this site, for research consultation\n      and scholarly purposes only. Further distribution and/or any\n      commercial use of the images from this site is not permitted.\n    </dd>\n  </div>\n</dl>"}},"/docs/scroll":{"title":"Scroll","data":{"":"A UI component rendering a vertical scrolling articles that output individual Canvases, basic descriptive properties, and Annotations with commenting motivations with support for transcribing and translating motivations.","features#Features":"Provide a IIIF Presentation API Manifest and the component:\nRenders the Canvases of a IIIF Manifest as HTML5 article elements\nOutputs Annotation textual content along with OpenSeadragon for images\nSupports vertical scrolling and textual discovery with a fixed Search... input","installation#Installation":"npm install @samvera/clover-iiif\n  yarn add @samvera/clover-iiif\n  pnpm install @samvera/clover-iiif","usage#Usage":"","react#React":"Add the Scroll component to your jsx or tsx code.\nimport Viewer from \"@samvera/clover-iiif/scroll\";\nRender Scroll with a IIIF Manifest URI. The only required prop is the iiifContent, which is the URI of the IIIF Manifest.\n<Scroll iiifContent=\"https://digital.lib.utk.edu/assemble/manifest/civilwar/5390\" />","nextjs#Next.js":"Implementation with Next.js requires a dynamic import utilizing next/dynamic. This is due to Next's node compilation method creating issue with an OpenSeadragon (a dependency of Clover IIIF) assumption of a browser document object.\nimport dynamic from \"next/dynamic\";\nconst Scroll = dynamic(\n  () => import(\"@samvera/clover-iiif\").then((Clover) => Clover.Scroll),\n  {\n    ssr: false,\n  },\n);\nconst MyCustomScroll = () => {\n  const iiifContent =\n    \"https://digital.lib.utk.edu/assemble/manifest/civilwar/5390\";\n  return <Scroll iiifContent={iiifContent} />;\n};","api-reference#API Reference":"Scroll can configured through an options prop, which will serve as a object for common options.\nProp\tType\tRequired\tDefault\tiiifContent\tstring\tYes\t\toptions\tobject\tNo\t\toptions.offset\tnumber\tNo\t0\toptions.figure\tSee Figure\tNo\t\toptions.language\tSee Language\tNo","offset#Offset":"The options.offset refers to the number of pixels to offset the fixed Search... input when scrolling vertically. This is useful when the Scroll is rendered within a page with a fixed header.\n<Scroll\n  iiifContent=\"https://digital.lib.utk.edu/assemble/manifest/civilwar/5390\"\n  options={{ offset: 90 }}\n/>","figure#Figure":"The Scroll component renders a figure element for each Canvas. The options.figure object allows for customization of the figure width, aspect ratio, and display. This can be useful for customizing the Scroll component to fit within a specific layout alongside other image viewers.\nProp\tType\tRequired\tDefault\toptions.figure.aspectRatio\tnumber\tNo\t1.618 Golden Ratio\toptions.figure.display\tthumbnail, image-viewer\tNo\timage-viewer\toptions.figure.width\tstring CSS\tNo\t38.2%\t\n<Scroll\n  iiifContent=\"https://digital.lib.utk.edu/assemble/manifest/civilwar/5390\"\n  options={{\n    figure: {\n      aspectRatio: 1,\n      display: \"thumbnail\",\n      width: \"200px\",\n    },\n  }}\n/>","language#Language":"The options.language object allows for the configuration of the language options for the Scroll component. This includes the default languages and language options.By default, the options.language object is not set, and the Scroll component will not display any language options. When the options.language object is set, the Scroll component will display a language dropdown that allows users to filter the content by languages within the Manifest annotation body resources. If defaultLanguages are not set, the Scroll component will display all languages available in the Manifest.The options.language.options array should be an array of objects with key-value pairs where the key is the language code and the value is the language name. The language code should match the language code in the Manifest annotation body resources.\nProp\tType\tRequired\tDefault\toptions.language.defaultLanguages\tstring[]\tNo\t[]\toptions.language.enabled\tboolean\tYes\tfalse\toptions.language.options\tArray<[key: string]: string>\tNo\t[]\t\n<Scroll\n  iiifContent=\"https://iiif-maktaba.dc.library.northwestern.edu/dc8ff749-adad-42a7-81e0-0eb473ef88a5.json\"\n  options={{\n    offset: 90,\n    language: {\n      defaultLanguages: [\"en\"],\n      enabled: true,\n      options: [{ en: \"English\" }, { ar: \"Arabic\" }],\n    },\n  }}\n/>"}},"/docs/scroll/demo":{"title":"Demo","data":{"scroll#Scroll":"A UI component rendering vertical scrolling articles that output individual Canvases, basic descriptive properties, and Annotations with commenting motivations with support for transcribing and translating motivations."}},"/docs/seeAlso":{"title":"SeeAlso","data":{"":"The SeeAlso component is used to display a list of related resources. A machine-readable resource such as an XML or RDF description that is related to the current resource that has the seeAlso property. The resource may be of any media type, and contain any type of data.\n<SeeAlso\n  seeAlso={[\n    {\n      id: \"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275\",\n      type: \"Dataset\",\n      format: \"application/json\",\n      label: {\n        none: [\"Northwestern University Libraries Digital Collections API\"],\n      },\n    },\n  ]}\n/>\n<ul class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a href=\"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275\">\n      Northwestern University Libraries Digital Collections API\n    </a>\n  </li>\n</ul>","usage#Usage":"","react#React":"import { SeeAlso } from \"@samvera/clover-iiif/primitives\";\nconst CustomSeeAlso = ({ seeAlso }) => {\n  return <SeeAlso seeAlso={seeAlso} />;\n};\nexport default CustomSeeAlso;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tol, ul\tul\t--\tseeAlso\tseeAlso\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","custom-element#Custom Element":"The SeeAlso component can be rendered as either ol or ul elements. The default is ul.\n<SeeAlso\n  seeAlso={[\n    {\n      id: \"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275\",\n      type: \"Dataset\",\n      format: \"application/json\",\n      label: {\n        none: [\"Northwestern University Libraries Digital Collections API\"],\n      },\n    },\n  ]}\n  as=\"ol\"\n/>\n<ol class=\"c-PJLV\">\n  <li class=\"c-PJLV\">\n    <a href=\"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275\">\n      Northwestern University Libraries Digital Collections API\n    </a>\n  </li>\n</ol>"}},"/docs/slider":{"title":"Slider","data":{"":"A UI component that renders an item carousel for the contents of a IIIF Collection using swiper.js.","features#Features":"Provide a IIIF Presentation API Collection and the component:\nRenders a carousel style components\nRenders label, summary for the referenced Collection\nTranscribes homepage as a View All button referenced Collection\nRenders items as a \"slide\" for each Manifest or Collection item\nRenders label, summary for each item \"slide\"\nTranscribes homepage as an <a> wrapping each item \"slide\"\nSupports custom breakpoints to display customized slide counts\nSupports callback onItemInteraction to override default \"slide\" behavior","installation#Installation":"npm install @samvera/clover-iiif\n  yarn add @samvera/clover-iiif\n  pnpm install @samvera/clover-iiif","usage#Usage":"","react#React":"Add the Slider component to your jsx or tsx code. Slider does require you to load swiper.js styling to the side. These stylesheets are not compiled with the @samvera/clover-iiif package, however are bundled as a dependency when installing Clover IIIF.\nimport Slider from \"@samvera/clover-iiif/slider\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nRender the slider with IIIF Collection URI. The only required prop is the iiifContent, which is the URI of the IIIF Collection.\n<Slider iiifContent=\"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\" />","api-reference#API Reference":"Viewer can configured through an options prop, which will serve as a object for common options.\nProp\tType\tRequired\tDefault\tiiifContent\tstring\tYes\t\tcollectionId (deprecated)\tstring\tNo\t\tonItemInteraction\tfunction\tNo\t\toptions.breakpoints\tSwiperProps[\"breakpoints\"]\tNo\t\toptions.credentials\tomit, same-origin, include\tNo\tomit\toptions.customViewAll\tstring\tNo","custom-breakpoints#Custom Breakpoints":"Slider uses default values per Swiper's breakpoints API . You may customize your own by passing in a breakpoints object, ie:\nconst MyCustomSlider = () => {\n  const iiifContent =\n    \"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\";\n  const customBreakpoints = {\n    320: {\n      slidesPerView: 2,\n      spaceBetween: 20,\n    },\n    480: {\n      slidesPerView: 3,\n      spaceBetween: 30,\n    },\n    640: {\n      slidesPerView: 4,\n      spaceBetween: 40,\n    },\n  };\n  return (\n    <Slider\n      iiifContent={iiifContent}\n      options={{\n        breakpoints: customBreakpoints,\n      }}\n    />\n  );\n};","custom-interactions#Custom Interactions":"The default behavior for a click (or press) event on each of the individual items is to route to the href value set by the IIIF Presentation 3.0 API homepage[0].id for each item entry.You can optionally set an event handler for the onItemInteraction value as a callback for a custom action. The full item object will be passed back to the consuming application.\nconst MyCustomSlider = () => {\n  const iiifContent =\n    \"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\";\n  const handleItemInteraction = (item: Manifest | Collection) => {\n    // do something with `item`\n    console.log(item);\n  };\n  return (\n    <Slider\n      iiifContent={iiifContent}\n      onItemInteraction={handleItemInteraction}\n    />\n  );\n};\nThe returned value of item provides the entire object for your custom interaction.\n{\n  \"id\": \"https://api.dc.library.northwestern.edu/api/v2/works/2de0355c-8e48-4478-93af-8cbd1437bd16?as=iiif\",\n  \"type\": \"Manifest\",\n  \"homepage\": [\n    {\n      \"id\": \"https://dc.library.northwestern.edu/items/2de0355c-8e48-4478-93af-8cbd1437bd16\",\n      \"type\": \"Text\",\n      \"format\": \"text/html\",\n      \"label\": {\n        \"none\": [\"Pulcinella \\\"tiepolano\\\"\"]\n      }\n    }\n  ],\n  \"label\": {\n    \"none\": [\"Pulcinella \\\"tiepolano\\\"\"]\n  },\n  \"summary\": {\n    \"none\": [\"Image\"]\n  },\n  \"thumbnail\": [\n    {\n      \"id\": \"https://api.dc.library.northwestern.edu/api/v2/works/2de0355c-8e48-4478-93af-8cbd1437bd16/thumbnail\",\n      \"format\": \"image/jpeg\",\n      \"type\": \"Image\",\n      \"width\": 400,\n      \"height\": 400\n    }\n  ]\n}","collection-anatomy#Collection Anatomy":"Bloom accepts both Presentation API 2.x and Presentation API 3.0 Collections.See Example Collection","header#Header":"","text#Text":"The top-level Collection label and summary (if existing) data is mapped to a Header sub-component\n\"label\": {\n  \"none\": [\"Commedia dell'Arte: The Masks of Antonio Fava\"]\n}\n\"summary\": {\n  \"none\": [\n    \"The Commedia dell'Arte, the famous improvisational theatre style born in Renaissance Italy, remains a major influence in today's theatre. Antonio Fava is an actor, comedian, author, director, musician, mask maker and Internationally renowned Maestro of Commedia dell'Arte.\"\n  ]\n}","link#Link":"The top-level Collection homepage represents the href attribute wrapping an HTML <a> element on the Header label\n\"homepage\": [\n  {\n    \"id\": \"https://dc.library.northwestern.edu/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd\",\n    \"type\": \"Text\",\n    \"label\": { \"none\": [\"Commedia dell'Arte: The Masks of Antonio Fava\"] },\n    \"format\": \"text/html\"\n  }\n]","items#Items":"The items array is mapped to the slider/carousel with each item rendering as an HTML <figure>\n\"items\": [\n  {\n    \"id\": \"https://iiif.stack.rdc.library.northwestern.edu/public/72/98/fd/ce/-a/dc/1-/45/01/-9/e1/4-/9e/8b/d9/85/e1/49-manifest.json\",\n    \"type\": \"Manifest\",\n    \"label\": { \"none\": [\"Pantalone classico\"] },\n    \"summary\": { \"none\": [\"Image\"] },\n    \"thumbnail\": [\n      {\n        \"id\": \"https://iiif.stack.rdc.library.northwestern.edu/iiif/2/180682c9-dfaf-4881-b7b6-1f2f21092d4f/full/200,/0/default.jpg\",\n        \"type\": \"Image\",\n        \"format\": \"image/jpeg\",\n        \"service\": [\n          {\n            \"id\": \"https://iiif.stack.rdc.library.northwestern.edu/iiif/2/180682c9-dfaf-4881-b7b6-1f2f21092d4f\",\n            \"profile\": \"http://iiif.io/api/image/2/level2.json\",\n            \"type\": \"ImageService2\"\n          }\n        ],\n        \"width\": 200,\n        \"height\": 200\n      }\n    ],\n    \"homepage\": [\n      {\n        \"id\": \"https://dc.library.northwestern.edu/items/7298fdce-adc1-4501-9e14-9e8bd985e149\",\n        \"type\": \"Text\",\n        \"label\": { \"none\": [\"Pantalone classico\"] },\n        \"format\": \"text/html\"\n      }\n    ]\n  }\n]","text-1#Text":"For each item, the label and summary (if existing) data are mapped to a <figcaption>\n\"label\": { \"none\": [\"Pantalone classico\"] }\n\"summary\": { \"none\": [\"Image\"] }","image#Image":"For each item, the thumbnail is rendered as an <img /> element within the <figure>\n\"thumbnail\": [\n  {\n    \"id\": \"https://iiif.stack.rdc.library.northwestern.edu/iiif/2/180682c9-dfaf-4881-b7b6-1f2f21092d4f/full/200,/0/default.jpg\",\n    \"type\": \"Image\",\n    \"format\": \"image/jpeg\",\n    \"service\": [\n      {\n        \"id\": \"https://iiif.stack.rdc.library.northwestern.edu/iiif/2/180682c9-dfaf-4881-b7b6-1f2f21092d4f\",\n        \"profile\": \"http://iiif.io/api/image/2/level2.json\",\n        \"type\": \"ImageService2\"\n      }\n    ],\n    \"width\": 200,\n    \"height\": 200\n  }\n]","link-1#Link":"The homepage for each item represents the href attribute of the HTML <a> element wrapping <figure>\n\"homepage\": [\n  {\n    \"id\": \"https://dc.library.northwestern.edu/items/7298fdce-adc1-4501-9e14-9e8bd985e149\",\n    \"type\": \"Text\",\n    \"label\": { \"none\": [\"Pantalone classico\"] },\n    \"format\": \"text/html\"\n  }\n]"}},"/docs/slider/demo":{"title":"Demo","data":{"slider#Slider":"A UI component that renders an item carousel for the contents of a IIIF Collection using swiper.js."}},"/docs/summary":{"title":"Summary","data":{"":"The Summary component is used to display a short description of the resource. It is a wrapper around the IIIF Presentation API 3.0 summary property. The summary property is a multi-lingual field that can be used to provide a short description of the resource. It is recommended that the summary be less than 250 characters. The summary property is intended to be displayed to the user when the resource is being selected from a list of search results or resources.\n<Summary\n  summary={{\n    none: [\n      \"In early zannesque comedy, all the female characters were comic, grotesque, and played by men. Zagna, the feminine counterpart to Zanni, is the formal, comic-grotesque exaggeration of the woman. The actors wore female clothing over an exaggerated female body, an effect achieved with the addition of excessive, carnivalesque accessories.  The Zagna mask, similar if not identical to the male mask, was worn with a scarf to cover the head.\",\n    ],\n  }}\n/>\n<span class=\"c-PJLV\">\n  In early zannesque comedy, all the female characters were comic,\n  grotesque, and played by men. Zagna, the feminine counterpart to Zanni, is\n  the formal, comic-grotesque exaggeration of the woman. The actors wore\n  female clothing over an exaggerated female body, an effect achieved with\n  the addition of excessive, carnivalesque accessories. The Zagna mask,\n  similar if not identical to the male mask, was worn with a scarf to cover\n  the head.\n</span>","usage#Usage":"","react#React":"import { Summary } from \"@samvera/clover-iiif/primitives\";\nconst CustomSummary = ({ summary }) => {\n  return <Summary summary={summary} />;\n};\nexport default CustomSummary;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tspan, h1, h2, h3, h4, h5, h6, p\tspan\t--\tsummary\tsummary\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","custom-element#Custom Element":"The Summary component can be rendered as  span, h1, h2, h3, h4, h5, h6, or p. The default is span.\n<Summary\n  summary={{\n    en: [\n      'Interview with Michelle Childs, professor with the Retail, Hospitality, and Tourism Management department of UT. Childs discusses the effects of the wildfire on the businesses in Gatlinburg primarily over an extended time frame. She talks about the preparedness of businesses with contacting employees during the fire and in terms of insurance coverage. She also elaborates on the initial return of tourists to the area, and the steady recovery of the area. This is a representative quote from the interview: \"What was really interesting because likely its such a small, tightknit community that those personal stories were really intertwined with the business stories.\"',\n    ],\n  }}\n  as=\"p\"\n/>\n<p class=\"c-PJLV\">\n  Interview with Michelle Childs, professor with the Retail, Hospitality,\n  and Tourism Management department of UT. Childs discusses the effects of\n  the wildfire on the businesses in Gatlinburg primarily over an extended\n  time frame. She talks about the preparedness of businesses with contacting\n  employees during the fire and in terms of insurance coverage. She also\n  elaborates on the initial return of tourists to the area, and the steady\n  recovery of the area. This is a representative quote from the interview:\n  \"What was really interesting because likely its such a small, tightknit\n  community that those personal stories were really intertwined with the\n  business stories.\"\n</p>","html-attributes#HTML Attributes":"Summary, like all Clover IIIF primitives accept common HTMLElement attributes. Use the JSX style className prop to add custom classes. The same attribute methodology can be used for id, style, title, data-*, and aria-* props.\n<Summary\n  summary={{\n    none: [\n      \"Robin Goodfellow playing a horn that ends in a dragon-head in front of a Berkeley Folk Music Festival sign. Digital scan of a black and white negative.\",\n    ],\n  }}\n  style={{ fontStyle: \"italic\", opacity: 0.8 }}\n/>\n<span style=\"font-style: italic; opacity: 0.8;\" class=\"c-PJLV\">\n  Robin Goodfellow playing a horn that ends in a dragon-head in front of a\n  Berkeley Folk Music Festival sign. Digital scan of a black and white\n  negative.\n</span>","language#Language":"Additional to being rendered to the DOM like other attributes, the value of lang will couple with InternationalString props to output the denoted label, value, summary entries. If lang is undefined, entries will default to the first entry in the array index. The value of lang should be a two letter BCP 47 language code.In this example we will render Arabic entries from the summary prop. The lang prop will be set to ar and dir will be set to rtl for right-to-left reading.\n<Summary\n  summary={{\n    en: [\n      \"The Messenger of God, may God bless him and grant him peace, if the son of a sultan is free, he will not die until he is king, if he is a slave, he will write it down on a tablet and drink once and bathe once and hang one on the road until he returns safe and sound.\",\n    ],\n    ar: [\n      \"رسول الله صلى اعلي إن كان ولد سلطان يكون بحرمة الخاتم لا يموت حتى يكون ملك, إن كان عبد يكون الحر, من يمشي الى سفر كتبه في لوح و شرب واحد و غسل واحد و علق واحد لايرا مصيبة الطريق حتى يرجع سالما غانما, من كتبه ولحد\",\n    ],\n  }}\n  as=\"p\"\n  dir=\"rtl\"\n  lang=\"ar\"\n/>\n<p dir=\"rtl\" lang=\"ar\" class=\"c-PJLV\">\n  رسول الله صلى اعلي إن كان ولد سلطان يكون بحرمة الخاتم لا يموت حتى يكون\n  ملك, إن كان عبد يكون الحر, من يمشي الى سفر كتبه في لوح و شرب واحد و غسل\n  واحد و علق واحد لايرا مصيبة الطريق حتى يرجع سالما غانما, من كتبه ولحد\n</p>"}},"/docs/thumbnail":{"title":"Thumbnail","data":{"":"The Thumbnail component is used to display a thumbnail for a IIIF resource. This generally is an Image, however, could be a short Video or Sound clip.\n<Thumbnail\n  thumbnail={[\n    {\n      id: \"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275/thumbnail\",\n      type: \"Image\",\n      format: \"image/jpeg\",\n      height: 200,\n      width: 200,\n    },\n  ]}\n/>\n<img\n  src=\"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275/thumbnail\"\n  class=\"c-eCSSFU c-eCSSFU-ieexNaM-css\"\n/>","usage#Usage":"","react#React":"import { Thumbnail } from \"@samvera/clover-iiif/primitives\";\nconst CustomThumbnail = ({ thumbnail }) => {\n  return <Thumbnail label={thumbnail} />;\n};\nexport default CustomThumbnail;","api-reference#API Reference":"Thumbnails are rendered to a relative HTML <img> or <video> element depenpdent on the type of the resource in the thumbnail entry. Currently, only type Image and Video are supported.\nProp\tType\tDefault\tRequired\tas\timg, video\timg\t--\tthumbnail\tthumbnail\t--\tYes\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","video-thumbnail#Video Thumbnail":"Using the Thumbnail component, you can render a video thumbnail. This is useful for displaying a short clip of a video resource. To do so, a W3C media fragment using temporal dimension should be appended to the id of the external Video resource, ex: #t=200,230. Additionally, a duration property should be used to account for time in seconds.\n<Thumbnail\n  thumbnail={[\n    {\n      id: \"https://meadow-streaming.rdc.library.northwestern.edu/5a/cc/f7/5f/-a/56/1-/4b/3c/-9/b4/5-/7d/cc/f7/03/90/e3/74-110-2.m3u8#t=200,230\",\n      type: \"Video\",\n      format: \"application/x-mpegurl\",\n      width: 300,\n      height: 300,\n      duration: 30,\n    },\n  ]}\n/>\n<video\n  disablepictureinpicture=\"\"\n  loop=\"\"\n  src=\"blob:https://samvera-labs.github.io/clover-iiif/07f97274-b45a-4bb9-af32-b921cac6868c\"\n  class=\"c-eCSSFU c-eCSSFU-ieBvefY-css\"\n  autoplay=\"\"\n></video>"}},"/docs/viewer":{"title":"Viewer","data":{"":"A UI component that renders a multicanvas IIIF item viewer with pan-zoom support for Image via OpenSeadragon and Video and Sound content resources using the HTML video element.","features#Features":"Provide a IIIF Presentation API Manifest or Collection and the component:\nRenders a multi-canvas Video, Sound, and Image viewer\nRenders thumbnails as navigation between canvases\nRenders annotations with the motivation of supplementing with a content resource having the format of text/vtt for Video and Sound\nVideo and Sound are rendered within a HTML5 <video> element\nImage canvases are renderered with OpenSeadragon\nSupports HLS streaming for Video and Audio canvases\nSupports IIIF Collections and toggling between child Manifests\nSupports placeholderCanvas for Image canvases.","installation#Installation":"npm install @samvera/clover-iiif\n  yarn add @samvera/clover-iiif\n  pnpm install @samvera/clover-iiif","usage#Usage":"","react#React":"Add the Viewer component to your jsx or tsx code.\nimport Viewer from \"@samvera/clover-iiif/viewer\";\nRender Viewer with a IIIF Manifest or Collection URI. The only required prop is the iiifContent, which is the URI of the IIIF Manifest or Collection.\n<Viewer iiifContent=\"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\" />","vanilla-javascript#Vanilla JavaScript":"The Viewer can also be implemented in Vanilla Javascript by use of a web component. This web component example sources a registered <clover-viewer> web component.\n<html>\n  <head>\n    <title>Clover IIIF - Viewer - Web Component</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <script src=\"https://www.unpkg.com/@samvera/clover-iiif@latest/dist/web-components/index.umd.js\"></script>\n    <clover-viewer\n      id=\"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\"\n    />\n  </body>\n</html>","nextjs#Next.js":"Implementation with Next.js requires a dynamic import utilizing next/dynamic. This is due to Next's node compilation method creating issue with an OpenSeadragon (a dependency of Clover IIIF) assumption of a browser document object.\nimport dynamic from \"next/dynamic\";\nconst Viewer = dynamic(\n  () => import(\"@samvera/clover-iiif\").then((Clover) => Clover.Viewer),\n  {\n    ssr: false,\n  },\n);\nconst MyCustomViewer = () => {\n  const iiifContent =\n    \"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\";\n  return <Viewer iiifContent={iiifContent} />;\n};","api-reference#API Reference":"Viewer can configured through an options prop, which will serve as a object for common options.\nProp\tType\tRequired\tDefault\tiiifContent\tstring\tYes\t\tiiifContentSearchQuery\tSee Content Search\tNo\t\tcanvasIdCallback\tfunction\tNo\t\tcustomDisplays\tSee Custom Displays\tNo\t\tcustomTheme\tobject\tNo\t\tplugins\tSee Plugins\tNo\t\toptions\tobject\tNo\t\toptions.background\tstring CSS\tNo\ttransparent\toptions.canvasBackgroundColor\tstring CSS\tNo\t#1a1d1e\toptions.canvasHeight\tstring CSS\tNo\t500px\toptions.ignoreCaptionLabels\tstring[]\tNo\t[]\toptions.openSeadragon\tOpenSeadragon.Options\tNo\t\toptions.informationPanel\tSee Information Panel\tNo\t\toptions.requestHeaders\tIncomingHttpHeaders\tNo\t{ \"Content-Type\": \"application/json\" }\toptions.showDownload\tboolean\tNo\ttrue\toptions.showIIIFBadge\tboolean\tNo\ttrue\toptions.showTitle\tboolean\tNo\ttrue\toptions.customLoadingComponent\tReact.ComponentType\tNo\t\toptions.withCredentials\tboolean\tNo\tfalse\toptions.contentSearch\tSee Content Search\tNo\t\t\nOptions canvasBackgroundColor and canvasHeight will apply to both <video> elements and the OpenseaDragon canvas.\nOption withCredentials being set as true will inform IIIF resource requests to be made using credentials such as cookies, authorization headers or TLS client certificates.\nOption options.openSeadragon will grant you ability to override the OpenSeadragon default options set within the Clover IIIF Viewer to adjust touch and mouse gesture settings and various other configurations.","canvas-height#Canvas Height":"The height of the canvas can be set using the options.canvasHeight prop. This prop accepts a string value that is a valid CSS height value. The default value is 500px.","automatic-height#Automatic Height":"If the height is set to auto or 100%, the Viewer will expand to the height of its wrapping container element. The wrapping element must have a position relative, along with a defined height for this to display as expected. Be aware to set a z-index value of 0 or an applicable value within your consuming application to ensure the viewer does not conflict with other page elements.\nexport default function App() {\n  const iiifContent =\n    \"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\";\n  const options = {\n    canvasHeight: \"auto\", // or \"100%\"\n  };\n  return (\n    <div style={{ position: \"relative\", height: \"80vh\", zIndex: \"0\" }}>\n      <Viewer iiifContent={iiifContent} options={options} />\n    </div>\n  );\n}","information-panel#Information Panel":"The information panel is a collapsible panel that displays information about the current Manifest and renders supplementing resources for the active canvas. It is rendered by default, but can be configured to be hidden or to render only certain tabs.\nProp\tType\tRequired\tDefault\toptions.informationPanel.open\tboolean\tNo\ttrue\toptions.informationPanel.vtt.autoScroll\tSee Auto Scroll\tNo\ttrue\toptions.informationPanel.renderAbout\tboolean\tNo\ttrue\toptions.informationPanel.renderAnnotation\tboolean\tNo\ttrue\toptions.informationPanel.renderSupplementing\tboolean\tNo\ttrue\toptions.informationPanel.renderToggle\tboolean\tNo\ttrue\toptions.informationPanel.renderContentSearch\tboolean\tNo\ttrue\toptions.informationPanel.defaultTab\tstring\tNo\t\t\nIf renderAbout is true, Clover will use the About tab as the default tab. Use options.informationPanel.defaultTab to set the default tab.If you want content search to be the default tab, use manifest-content-search\n<Viewer\n  iiifContent=\"https://example.com/manifest/1\"\n  options={{\n    informationPanel: {\n      defaultTab: \"manifest-content-search\",\n    },\n  }}\n/>\nIf the manifest has annotations, and you want one of the anotations to be the default tab, use the id from the annotation page.\n{\n  \"@context\": [\"http://iiif.io/api/presentation/3/context.json\"],\n  \"type\": \"Manifest\",\n   ...\n  \"items\": [\n    {\n      \"id\": \"http://example.com/manifest/canvas/1\",\n      \"type\": \"Canvas\",\n      \"height\": 1000,\n      \"width\": 2000,\n      \"annotations\": [\n        {\n          \"id\": \"http://example.com/manifest/annotation/1\",\n          \"type\": \"AnnotationPage\",\n          \"items\": [...]\n        }\n      ]\n    }\n  ]\n}\n<Viewer\n  iiifContent=\"https://example.com/manifest/1\"\n  options={{\n    informationPanel: {\n      defaultTab: \"http://example.com/manifest/annotation/1\",\n    },\n  }}\n/>","auto-scroll#Auto Scroll":"When VTT annotations are displayed, the Clover IIIF Viewer can automatically scroll the information panel to keep the currently active caption in view. Whether it does so (and how) is governed by the informationPanel.vtt.autoScroll configuration option. The possible values are:\n{ behavior: (behavior), block: (block) }: auto-scroll using the given settings (see below).\ntrue: Auto-scroll using the default behavior. This is equivalent to { behavior: \"smooth\", block: \"center\" }.\nfalse: Do not auto-scroll.\nThe settings take the form { behavior: \"auto\" | \"instant\" | \"smooth\", block: \"center\" | \"end\" | \"nearest\" | \"start\" }, and have the same effect as the scrollIntoViewOptions object documented with the Element.scrollIntoView() Web API method. (The inline option does not apply since there is no horizontal scrolling involved.)","custom-displays#Custom Displays":"Clients may wish to use their own display components (for example a PDF Viewer, or an audio player, etc). To configure custom displays, use the customDisplays prop, which is an array of objects defining display and target properties. See an example implementationdisplay.component is a custom React component, and display.componentProps are pass-through props which Viewer will attach to your Custom Display component. The target object provides two methods of matching a Canvas to a Custom Display: target.canvasId which is a manifest's canvas id. Or by target.paintingFormat (ie. application/pdf) which is the body.type in a canvas's Annotation of type \"painting\".\nProp\tType\tRequired\tDefault\tcustomDisplays.display.component\tReact.Node\tNo\t\tcustomDisplays.display.componentProps\tobject\tNo\t\tcustomDisplays.target.canvasId\tstring[]\tNo\t\tcustomDisplays.target.paintingFormat\tstring[]\tNo","content-search#Content search":"Clover supports IIIF content search v2. In order to display content search in the information panel, add a content search service to the manifest.\n{\n  \"@context\": [\"http://iiif.io/api/presentation/3/context.json\"],\n  \"type\": \"Manifest\",\n  ...\n  \"service\": [\n    {\n      \"id\": \"https://example.com/search\",\n      \"type\": \"SearchService2\"\n    }\n  ]\n}\nProp\tType\tRequired\tDefault\tiiifContentSearchQuery.q\tstring\tNo\t\toptions.contentSearch.searchResultsLimit\tnumber\tNo\t20\toptions.contentSearch.overlays.backgroundColor\tstring\tNo\t#ff66660\toptions.contentSearch.overlays.borderColor\tstring\tNo\t#990000\toptions.contentSearch.overlays.borderType\tstring\tNo\tsolid\toptions.contentSearch.overlays.borderWidth\tstring\tNo\t1px\toptions.contentSearch.overlays.opacity\tstring\tNo\t0.5\toptions.contentSearch.overlays.renderOverlays\tboolean\tNo\ttrue\toptions.contentSearch.overlays.zoomLevel\tnumber\tNo\t4\t\nMany sites have a search functionality that returns a list objects that match the search terms. Clicking on a search result will display a details page for one object. If you want to highlight the search terms when the Clover image viewer loads on the details page, use iiifContentSearchQuery when setting up the viewer.\n<Viewer\n  iiifContent=\"https://example.com/manifest/1\"\n  iiifContentSearchQuery={{\n    q: \"my search terms\",\n  }}\n/>\noptions.contentSearch.searchResultsLimit is the maximum number of search results to display per canvas in the information panel. If set to undefined, Clover will show all search results.By default, Clover's content search will draw light red boxes in the image viewer for each search result returned by the search service. You can set the appearance of the highlighted boxes using options.contentSearch.overlays. If you don't want the search results to be highlighted, set options.contentSearch.overlays.renderOverlays to false.When you click on the list of search results, Clover will pan and zoom to the location of that search result. You can set the zoom level using options.contentSearch.overlays.zoomLevel. A small zoom level will zoom in real close; a large zoom level will zoom in less.","deprecated-options#Deprecated Options":"Prop\tIn Favor Of\tDeprecated\tid\tiiifContent\tv2.0.0\tmanifestId\tiiifContent\tv2.0.0\toptions.renderAbout\toptions.informationPanel.renderAbout\tv2.0.3\toptions.showInformationToggle\toptions.informationPanel.renderToggle\tv2.0.3","basic-configuration#Basic Configuration":"Example customization of various options.\nconst options = {\n  // Primary title (Manifest label) for top level canvas.  Defaults to true\n  showTitle: false,\n  // IIIF Badge and popover containing options.  Defaults to true\n  showIIIFBadge: false,\n  // Ignore supplementing canvases by label value that are not for captioning\n  ignoreCaptionLabels: ['Chapters'],\n  // Override canvas background color, defaults to #1a1d1e\n  canvasBackgroundColor: \"#000\",\n  // Set canvas zooming onScoll (this defaults to false)\n  openSeadragon: {\n    gestureSettingsMouse: {\n      scrollToZoom: true;\n    }\n  }\n}\n<Viewer\n  iiifContent=\"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\"\n  options={options}\n/>","active-canvas#Active Canvas":"Example on using canvasIdCallback to return to your consuming application the active canvas ID. This will return as a string.\nconst iiifContent =\n  \"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\";\nconst handlCanvasIdCallback = (activeCanvasId) => {\n  if (activeCanvasId) console.log(activeCanvasId);\n};\nreturn (\n  <Viewer iiifContent={iiifContent} canvasIdCallback={handlCanvasIdCallback} />\n);","captions#Captions":"WebVTT content resources are the source for both content mapped closed captioning <track/> elements in the HTML 5 video player and to the navigator panel adjacent to it. You may ignore these resources as tracks if they are not intended for closed captioning or subtitling by string values matching the label of the content resource. This is a manual option within the viewer as there is no defined way for a manifest to prescribe motivation for these resources beyond supplementing.\nexport default function App() {\n  const iiifContent =\n    \"https://raw.githubusercontent.com/samvera-labs/clover-iiif/main/public/fixtures/iiif/manifests/captions.json\";\n  const options = {\n    ignoreCaptionLabels: [\"Chapters\"],\n  };\n  return <Viewer iiifContent={iiifContent} options={options} />;\n}","custom-theme#Custom Theme":"You may choose to override the base theme by setting optional colors and fonts. Naming conventions for colors are limited to those shown in the config example below.\nconst iiifContent =\n  \"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\";\nconst customTheme = {\n  colors: {\n    /**\n     * Black and dark grays in a light theme.\n     * All must contrast to 4.5 or greater with `secondary`.\n     */\n    primary: \"#37474F\",\n    primaryMuted: \"#546E7A\",\n    primaryAlt: \"#263238\",\n    /**\n     * Key brand color(s).\n     * `accent` must contrast to 4.5 or greater with `secondary`.\n     */\n    accent: \"#C62828\",\n    accentMuted: \"#E57373\",\n    accentAlt: \"#B71C1C\",\n    /**\n     * White and light grays in a light theme.\n     * All must must contrast to 4.5 or greater with `primary` and  `accent`.\n     */\n    secondary: \"#FFFFFF\",\n    secondaryMuted: \"#ECEFF1\",\n    secondaryAlt: \"#CFD8DC\",\n  },\n  fonts: {\n    sans: \"'Helvetica Neue', sans-serif\",\n    display: \"Optima, Georgia, Arial, sans-serif\",\n  },\n};\nreturn <Viewer iiifContent={iiifContent} customTheme={customTheme} />;","css-classes#CSS Classes":"Additional CSS classes are made available on structural HTML elements in the Viewer, which may be referenced in a client's own CSS files/style definitions to further customize the Viewer's appearance. You may inspect the DOM to see classes applied to each element, but in general it follows a pattern similar to:\n<div class=\"clover-viewer\">\n  <header class=\"clover-viewer-header\" />\n  <div class=\"clover-viewer-content\">\n    <div class=\"clover-viewer-painting\">...</div>\n  </div>\n</div>","request-headers#Request Headers":"In some cases, a client may need to request Manifest or Collection resources with custom request headers, ex: Authorization. This can be done by passing a requestHeaders object to the options prop. This object will be passed to the request call made by the Viewer. Accepted header keys are defined in the IncomingHttpHeaders interface.\nconst iiifContent =\n  \"https://api.dc.library.northwestern.edu/api/v2/works/8a833741-74a8-40dc-bd1d-c416a3b1bb38?as=iiif\";\nconst token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\";\nreturn (\n  <Viewer\n    iiifContent={iiifContent}\n    options={{\n      requestHeaders: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }}\n  />\n);","custom-loading-component#Custom Loading Component":"Clients may choose to override the default loading component that displays while the IIIF resource is fetched and loaded into state.\n<Viewer\n  iiifContent=\"https://example.com/manifest/1\"\n  options={{\n    customLoadingComponent: () => <>My custom loading component</>,\n  }}\n/>","custom-canvas-displays#Custom canvas displays":"Clients may wish to use their own display components instead of Clover Viewer's default displays (OpenSeadragon for images and HTML Video Player for audio/video). The Viewer component allows a client to target individual canvas items in a IIIF Manifest by either direct reference to a canvas id or format (ie. video/ogg). See the Type Definition below for CustomDisplay, and an example implementation.\nimport AnotherCustomDisplay from \"./AnotherCustomDisplay\";\ntype CustomDisplay = {\n  display: {\n    component: React.ElementType;\n    componentProps: {\n      // Any custom props you want to pass to your component\n      [key: string]: any;\n    };\n  };\n  target: {\n    canvasId: string[];\n    paintingFormat: string[]; // \"application/pdf\" or \"application/epub+zip\"\n  };\n};\nfunction MyCustomDisplay({ id, annotationBody, ...restProps }: CustomDisplay) {\n  return (\n    <div>\n      <h1>My Custom Display</h1>\n      <p>Canvas ID: {id}</p>\n      <p>Annotation Body:</p>\n      <pre>{JSON.stringify(annotationBody)}</pre>\n      <p>Custom props:</p>\n      <pre>{JSON.stringify(restProps)}</pre>\n      ...your display here\n    </div>\n  );\n}\n<Viewer\n  iiifContent={iiifContent}\n  customDisplays={[\n    {\n      display: {\n        component: MyCustomDisplay,\n        componentProps: {\n          foo: \"bar\",\n        },\n      },\n      target: {\n        canvasId: [\n          \"https://uri-for-a-canvas-id/access/0\",\n          \"https://uri-for-a-canvas-id/access/1\",\n        ],\n      },\n    },\n    {\n      display: {\n        component: AnotherCustomDisplay,\n      },\n      target: {\n        paintingFormat: [\"application/pdf\", \"image/gif\"],\n      },\n    },\n  ]}\n/>;\nThe Viewer component will pass the following props to your custom display component:\nid: The canvas id for the resource being rendered. This may be helpful if you wanted to use the canvas id to fetch additional data from your application's API.\nannotationBody: The body value for a canvas Annotation item with motivation \"painting\".\n{\n  \"id\": \"https://uri-for-a-canvas-id/access/0\",\n  \"type\": \"Annotation\",\n  \"motivation\": \"painting\",\n  \"body\": {\n    \"format\": \"application/pdf\",\n    \"height\": 1686,\n    \"id\": \"http://localhost:3000/media/pdf/file-sample_150kB.pdf\",\n    \"width\": 1192\n  }\n}\nSee a complete recipe for a PDF Viewer using custom canvas displays.","plugins#Plugins":"Clover supports 3rd-party plugins as a way to add more functionality to Clover. To add plugins, use the plugins prop. plugins will accept an array of objects, with each object representing a plugin.People can use prebuilt plugins or create their own plugins. To install a prebuilt plugin, people should follow the instructions for the particular plugin.Here's an example of using two plugins. PluginA adds a button to imageViewer.controls. PluginB adds a tab to informationPanel.\nimport PluginA from \"plugin-A\";\nimport PluginB from \"plugin-B\";\nexport default function App() {\n  return (\n    <Viewer\n      iiifContent={iiifContent}\n      plugins={[\n        {\n          id: \"Plugin A\",\n          imageViewer: {\n            controls: {\n              component: PluginA,\n            },\n          },\n        },\n        {\n          id: \"Plugin B\",\n          informationPanel: {\n            component: PluginB,\n            componentProps: {\n              objectId: 456,\n            },\n            label: { none: [\"My Plugin\"] },\n          },\n        },\n      ]}\n    />\n  );\n}\nProp\tType\tRequired\tDefault\tid\tstring\tyes\t\timageViewer.controls\tobject\tNo\t\timageViewer.controls.component\tReact Component\tyes\t\timageViewer.controls.componentProps\tobject\tno\t\tinformationPanel\tobject\tNo\t\tinformationPanel.component\tReact Component\tyes\t\tinformationPanel.componentProps\tobject\tno\t\tinformationPanel.label\tobject\tyes\t\t\nid - unique id for the pluginimageViewer.controls - If you want to add a custom component to image viewer controls, use imageViewer.controls.imageViewer.controls.component - The component to render.imageViewer.controls.componentProps - Props passed to the controls component.informationPanel - If you want to add a custom component to the information panel, use informationPanel.informationPanel.component - The component to render.informationPanel.componentProps - Props passed to the information panel component.informationPanel.label - The text that is displayed in the tab.","instructions-for-creating-a-plugin#Instructions for creating a plugin":"Clover offers these features to support plugins:\nRenders custom React components in certain areas of the Clover Viewer. Areas include image viewer controls and information panel.\nGives plugins the ability to access and change the state of the Clover Viewer via props\nPass in props to the plugin components\nProp\tDescription\tcanvas\tactive canvas object\tuseViewerDispatch\tReact hook to update the Viewer context store\tuseViewerState\tReact hook to access the Viewer context store\t\nHere is an example plugin that has both imageViewer.controls and informationPanel. Plugin components have access to canvas, useViewerDispatch, and useViewerState via props.\n// PluginButton.tsx\nexport default function PluginButton(props) {\n  const { canvas, useViewerDispatch, useViewerState } = props;\n  // use useViewerState to access to viewer state properties such as openSeadragonViewer, etc\n  const viewerState = useViewerState();\n  const { openSeadragonViewer, activeManifest } = viewerState;\n  // use useViewerDispatch to update viewer state\n  const dispatch: any = useViewerDispatch();\n  function clickHandler() {\n    dispatch({\n      type: \"updateOSDImageLoaded\",\n      OSDImageLoaded: false,\n    });\n  }\n  return (\n    <button\n      onClick={clickHandler}\n      style={{\n        backgroundColor: \"var(--colors-primary)\",\n        borderRadius: \"2rem\",\n        width: \"2rem\",\n        margin: \"0px 0px 0px 0.618rem\",\n      }}\n    >\n      <b>P</b>\n    </button>\n  );\n}\n// PluginInfoPanel.tsx\nexport default function PluginInfoPanel(props) {\n  const {\n    canvas,\n    useViewerDispatch,\n    useViewerState,\n    // componentProps\n    objectId,\n  } = props;\n  return (\n    <div style={{ padding: \"0px 1.618rem 2rem\" }}>\n      <p>Plugin Info Panel</p>\n      <p>objectId: {objectId}</p>\n    </div>\n  );\n}\n// App.tsx\nimport PluginButton from \"PluginButton\";\nimport PluginInfoPanel from \"PluginInfoPanel\";\nexport default function App() {\n  return (\n    <Viewer\n      iiifContent=\"https://iiif.io/api/cookbook/recipe/0001-mvm-image/manifest.json\"\n      plugins={[\n        {\n          id: \"Demo\",\n          imageViewer: {\n            controls: {\n              component: PluginButton,\n            },\n          },\n          informationPanel: {\n            component: PluginInfoPanel,\n            label: { none: [\"My Plugin\"] },\n            componentProps: {\n              objectId: 456,\n            },\n          },\n        },\n      ]}\n    />\n  );\n}\nIf the imageViewer.controls.component and informationPanel.component need to share state, wrap the Viewer in a context provider that is provided by the plugin.\nimport PluginButton from \"PluginButton\";\nimport PluginInfoPanel from \"PluginInfoPanel\";\nimport { PluginProvider } from \"PluginContext\";\nexport default function App() {\n  return (\n    <PluginProvider>\n      <Viewer\n        iiifContent=\"https://iiif.io/api/cookbook/recipe/0001-mvm-image/manifest.json\"\n        plugins={[\n          {\n            id: \"Demo\",\n            imageViewer: {\n              controls: {\n                component: PluginButton,\n              },\n            },\n            informationPanel: {\n              component: PluginInfoPanel,\n              label: { none: [\"My Plugin\"] },\n              componentProps: {\n                objectId: 456,\n              },\n            },\n          },\n        ]}\n      />\n    </PluginProvider>\n  );\n}"}},"/docs/viewer/contentsearch":{"title":"Contentsearch","data":{"viewer#Viewer":"","content-search#Content search.":"Type in anything in the search field, and click the search button or type return. This demo will show the search results for \"Berliner\". Click on any of search results, and Clover will zoom and pan to that search result.Due to the fact that the Clover documentation site is a statically generated, search will only return results for \"Berliner\" because the search service returns a static content search manifest. In a fully functional site, the search service will return a dynamic content search manifest based on the entered search words."}},"/docs/viewer/demo":{"title":"Demo","data":{"viewer#Viewer":"A UI component that renders a multicanvas IIIF item viewer with pan-zoom support for Image via OpenSeadragon and Video and Sound content resources using the HTML video element."}},"/":{"title":"Index","data":{"":"<Viewer iiifContent=\"https://api.dc.library.northwestern.edu/api/v2/works/71153379-4283-43be-8b0f-4e7e3bfda275?as=iiif\" />\n<Scroll iiifContent=\"https://digital.lib.utk.edu/assemble/manifest/civilwar/5390\" />\n<Slider iiifContent=\"https://api.dc.library.northwestern.edu/api/v2/collections/c373ecd2-2c45-45f2-9f9e-52dc244870bd?as=iiif\" />\n<Image src=\"https://iiif.dc.library.northwestern.edu/iiif/2/b6359e7f-070c-4c86-aee1-515e5b6604e2/full/full/0/default.jpg\" />\n<Label label={manifest.label} />\n<Summary summary={manifest.summary} />\n<Metadata metadata={manifest.metadata} />\n<RequiredStatement requiredStatement={manifest.requiredStatement} />\n<Thumbnail thumbnail={manifest.thumbnail} />\n<PartOf partOf={manifest.partOf} />\n<SeeAlso seeAlso={manifest.seeAlso} />\n<Rendering rendering={manifest.rendering} />\n<Homepage homepage={manifest.homepage} />"}},"/docs/image":{"title":"Image","data":{"":"A UI component that renders a pan and deep-zoom Image viewer using OpenSeadragon.","features#Features":"Provide a IIIF Annotation body with the type of Image and the component:\nRenders a single OpenSeadragon instance.\nReturns OpenSeadragon's Viewer instance for programmatic control.\nProvides configuration options for OpenSeadragon's Viewer instance.","installation#Installation":"npm install @samvera/clover-iiif\n  yarn add @samvera/clover-iiif\n  pnpm install @samvera/clover-iiif","usage#Usage":"","react#React":"Add the Image component to your jsx or tsx code.\nimport Image from \"@samvera/clover-iiif/image\";","using-src-and-istiledimage-props#Using src and isTiledImage props":"For Tiled Images, render Image with a src attribute of the IIIF Image service id. The isTiledImage prop is optional and defaults to false.\n<div style={{ height: \"400px\" }}>\n  <CloverImage\n    src=\"https://iiif.dc.library.northwestern.edu/iiif/2/6ca016c5-de7f-4373-ae8f-7047fecf6ace\"\n    isTiledImage={true}\n  />\n</div>\nFor Simple Images, render Image with a src attribute of the image, ex: https://example.org/image.jpg. The isTiledImage must be omitted or set to false.\n<div style={{ height: \"400px\" }}>\n  <CloverImage\n    src=\"https://iiif.dc.library.northwestern.edu/iiif/2/6ca016c5-de7f-4373-ae8f-7047fecf6ace/full/1000,/0/default.jpg\"\n  />\n</div>","using-the-iiif-annotation-body#Using the IIIF annotation body":"When using the IIIF annotation body from IIIF Manifest, the Image component will render the image based on the IIIF Image service id and other properties.\n<div style={{ height: \"400px\" }}>\n  <CloverImage\n    body={{\n      id: \"https://iiif.dc.library.northwestern.edu/iiif/2/6ca016c5-de7f-4373-ae8f-7047fecf6ace/full/600,/0/default.jpg\",\n      type: \"Image\",\n      format: \"image/tiff\",\n      height: 5709,\n      width: 8949,\n      service: [\n        {\n          \"@id\":\n            \"https://iiif.dc.library.northwestern.edu/iiif/2/6ca016c5-de7f-4373-ae8f-7047fecf6ace\",\n          \"@type\": \"ImageService2\",\n          profile: \"http://iiif.io/api/image/2/level2.json\",\n        },\n      ],\n    }}\n  />\n</div>","vanilla-javascript#Vanilla JavaScript":"The Viewer can also be implemented in Vanilla Javascript by use of a web component. This web component example sources a registered <clover-viewer> web component.\n<html>\n  <head>\n    <title>Clover IIIF - Image - Web Component</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <script src=\"https://www.unpkg.com/@samvera/clover-iiif@latest/dist/web-components/index.umd.js\"></script>\n    <div style=\"height: 400px;\">\n        <clover-image\n          src=\"https://iiif.dc.library.northwestern.edu/iiif/2/7192086f-fbe3-4939-b58a-6a63cddea42f\"\n          is-tiled-image=\"true\"\n          aria-label=\"A IIIF Image\"\n        />\n    </div>\n  </body>\n</html>","nextjs#Next.js":"Implementation with Next.js requires a dynamic import utilizing next/dynamic. This is due to Next's node compilation method creating issue with an OpenSeadragon (a dependency of Clover IIIF) assumption of a browser document object.\nimport dynamic from \"next/dynamic\";\nconst Image = dynamic(\n  () => import(\"@samvera/clover-iiif\").then((Clover) => Clover.Image),\n  {\n    ssr: false,\n  },\n);\nconst MyCustomImage = () => {\n  return (\n    <Image src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\" />\n  );\n};","api-reference#API Reference":"Note that while that src and body are both optional, at least one of them must be provided.\nProp\tType\tRequired\tbody\tIIIF Content Resource\tNo\tinstanceId\tstring\tNo\tlabel\tstring or IIIF Label\tNo\tsrc\tstring\tNo\topenSeadragonCallback\tfunction\tNo\topenSeadragonConfig\tOpenSeadragon.Options\tNo","openseadragon#OpenSeadragon":"","openseadragon-callback#OpenSeadragon Callback":"The Image component uses OpenSeadragon to render the image. The openSeadragonCallback prop provides a callback function that returns the OpenSeadragon Viewer instance. This can be used to programmatically control the viewer from the consuming application.\nimport Image from \"@samvera/clover-iiif/image\";\nconst MyCustomImage = () => {\n  export const handleOpenSeadragonCallback = (viewer) => {\n    console.log(\"OpenSeadragon instance is ready\");\n    console.log(viewer);\n  };\n  return (\n    <Image\n      src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\"\n      openSeadragonCallback={handleOpenSeadragonCallback}\n    />\n  );\n};","openseadragon-configuration#OpenSeadragon Configuration":"The openSeadragonConfig prop provides a way to configure the OpenSeadragon Viewer instance. This prop accepts an object of OpenSeadragon.Options.\nimport Image from \"@samvera/clover-iiif/image\";\nconst MyCustomImage = () => {\n  const openSeadragonConfig = {\n    showNavigator: false,\n    showRotationControl: true,\n    // ... other OpenSeadragon options\n  };\n  return (\n    <Image\n      src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\"\n      openSeadragonConfig={openSeadragonConfig}\n    />\n  );\n};","label-and-aria#Label and ARIA":"The label prop is used to provide an accessible name for the OpenSeadragon. This is used as the aria-label attribute on the viewport element wrapping the OpenSeadragon canvas.The label can be a string or a valid IIIF Presentation API 3.0 label.\nimport Image from \"@samvera/clover-iiif/image\";\nconst MyCustomImage = () => {\n  return (\n    <Image\n      src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\"\n      label=\"Self-Portrait at Eleven Years Old\"\n    />\n  );\n};\nimport Image from \"@samvera/clover-iiif/image\";\nconst MyCustomImage = () => {\n  return (\n    <Image\n      src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\"\n      label={{ en: [\"Self-Portrait at Eleven Years Old\"] }}\n    />\n  );\n};","instance-id#Instance ID":"The instanceId prop is used to provide an identifier defined from the consuming application for the OpenSeadragon instance. This is used as the id attribute on the viewport element wrapping the OpenSeadragon canvas. instanceId is optional and by default the Image component will generate a unique identifier.\nimport Image from \"@samvera/clover-iiif/image\";\nconst MyCustomImage = () => {\n  const instanceId = \"my-defined-instance-id\";\n  const handleOpenSeadragonCallback = (viewer) => {\n    console.log(viewer?.id);\n    // openseadragon-my-defined-instance-id\n  };\n  return (\n    <Image\n      src=\"https://ids.lib.harvard.edu/ids/iiif/18772291/full/full/0/default.jpg\"\n      instanceId={instanceId}\n      openSeadragonCallback={handleOpenSeadragonCallback}\n    />\n  );\n};"}},"/docs/metadata":{"title":"Metadata","data":{"":"An ordered list of descriptions to be displayed to the user when they interact with the resource, given as pairs of human readable label and value entries.\n<Metadata\n  metadata={[\n    {\n      label: {\n        none: [\"Creator\"],\n      },\n      value: {\n        none: [\"Fava, Antonio, 1949-\"],\n      },\n    },\n    {\n      label: {\n        none: [\"Date\"],\n      },\n      value: {\n        none: [\"2012\"],\n      },\n    },\n  ]}\n/>\n<dl class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"creator\">\n    <dt class=\"c-PJLV\">Creator</dt>\n    <dd class=\"c-PJLV\">Fava, Antonio, 1949-</dd>\n  </div>\n  <div role=\"group\" data-label=\"date\">\n    <dt class=\"c-PJLV\">Date</dt>\n    <dd class=\"c-PJLV\">2012</dd>\n  </div>\n</dl>","usage#Usage":"","react#React":"import { Metadata } from \"@samvera/clover-iiif/primitives\";\nconst CustomMetadata = ({ metadata }) => {\n  return <Metadata metadata={metadata} />;\n};\nexport default CustomMetadata;","api-reference#API Reference":"Prop\tType\tDefault\tRequired\tas\tdl\tdl\t--\tmetadata\tmetadata\t--\tYes\tcustomValueContent\tPrimitivesCustomValueContent[]\t--\t--\tcustomValueDelimiter\tstring?\t,\t--\tclassName\tstring, undefined\t--\t--\tstyle\tCSSProperties, undefined\t--\t--\tlang\tstring, undefined\t--\t--\ttitle\tstring, undefined\t--\t--\tdata-*\tstring, undefined\t--\t--\taria-*\tAriaAttributes, undefined\t--\t--","html-attributes#HTML Attributes":"Metadata, like all Clover IIIF primitives accept common HTMLElement attributes. Use the JSX style className prop to add custom classes. The same attribute methodology can be used for id, style, title, data-*, and aria-* props.\n<Metadata\n  metadata={[\n    {\n      label: {\n        none: [\"Creator\"],\n      },\n      value: {\n        none: [\"Fava, Antonio, 1949-\"],\n      },\n    },\n    {\n      label: {\n        none: [\"Date\"],\n      },\n      value: {\n        none: [\"2012\"],\n      },\n    },\n  ]}\n  style={{ color: \"red\" }}\n/>\n<dl style=\"color: red;\" class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"creator\">\n    <dt class=\"c-PJLV\">Creator</dt>\n    <dd class=\"c-PJLV\">Fava, Antonio, 1949-</dd>\n  </div>\n  <div role=\"group\" data-label=\"date\">\n    <dt class=\"c-PJLV\">Date</dt>\n    <dd class=\"c-PJLV\">2012</dd>\n  </div>\n</dl>","language#Language":"Additional to being rendered to the DOM like other attributes, the value of lang will couple with InternationalString props to output the denoted label, value, summary entries. If lang is undefined, entries will default to the first entry in the array index. The value of lang should be a two letter BCP 47 language code.\n<Metadata\n  metadata={[\n    {\n      label: {\n        en: [\"Associated\"],\n        de: [\"Beteiligte\"],\n      },\n      value: {\n        en: [\"Jan Brueghel the Elder\"],\n        de: [\"Jan (der Ältere) Brueghel\"],\n      },\n    },\n    {\n      label: {\n        en: [\"Technique\"],\n        de: [\"Technik\"],\n      },\n      value: {\n        en: [\"Oil\", \"copper\"],\n        de: [\"Öl\", \"Kupfer\"],\n      },\n    },\n  ]}\n  lang=\"de\"\n/>\n<dl lang=\"de\" class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"associated\">\n    <dt lang=\"de\" class=\"c-PJLV\">\n      Beteiligte\n    </dt>\n    <dd lang=\"de\" class=\"c-PJLV\">\n      Jan (der Ältere) Brueghel\n    </dd>\n  </div>\n  <div role=\"group\" data-label=\"technique\">\n    <dt lang=\"de\" class=\"c-PJLV\">\n      Technik\n    </dt>\n    <dd lang=\"de\" class=\"c-PJLV\">\n      Öl, Kupfer\n    </dd>\n  </div>\n</dl>","custom-values#Custom Values":"If a consuming application requires rendering specific metadata item values in a custom pattern, the customValueContent prop can be used. The pattern requires matchingLabel following https://iiif.io/api/presentation/3.0/#label and Content as a ReactElement carrying props. The element set for Content must map props.value to the appropriate code in the custom pattern.In the example below, the value of Pantaloon with a matching label of { none: [\"Subject\"] } would be rendered as <dd><a href=\"https://example.org/?subject=Pantaloon\">Pantaloon</a><dd>, while the value entry of comic masks would render simply as <dd>comic masks</dd>.\nconst metadata = [\n  {\n    label: { none: [\"Genre\"] },\n    value: { none: [\"comic masks\"] },\n  },\n  {\n    label: { none: [\"Subject\"] },\n    value: { none: [\"Pantaloon\"] },\n  },\n];\nconst CustomValueSubject = (props) => (\n  <a href={encodeURI(`https://example.org/?subject=${props.value}`)}>\n    {props.value}\n  </a>\n);\nconst customValueContent = [\n  {\n    matchingLabel: { none: [\"Subject\"] },\n    Content: <CustomValueSubject />,\n  },\n];\nreturn <Metadata metadata={metadata} customValueContent={customValueContent} />;","custom-delimiter#Custom Delimiter":"<Metadata\n  metadata={[\n    {\n      label: {\n        none: [\"Subject\"],\n      },\n      value: {\n        none: [\n          \"Masks\",\n          \"Commedia dell'arte\",\n          \"Italian drama (Comedy)\",\n          \"Zanni (Fictitious character)\",\n        ],\n      },\n    },\n  ]}\n  customValueDelimiter=\"<br/>\"\n/>\n<dl class=\"c-PJLV\">\n  <div role=\"group\" data-label=\"subject\">\n    <dt class=\"c-PJLV\">Subject</dt>\n    <dd class=\"c-PJLV\">\n      Masks<br>\n      Commedia dell'arte<br>\n      Italian drama (Comedy)<br>\n      Zanni (Fictitious character)\n    </dd>\n  </div>\n</dl>"}}}